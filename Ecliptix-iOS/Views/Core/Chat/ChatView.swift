//
//  ChatView.swift
//  Ecliptix-iOS
//
//  Created by Oleksandr Melnechenko on 05.08.2025.
//

import SwiftUI
import PhotosUI
import UniformTypeIdentifiers

struct ChatView: View {
    @Environment(\.dismiss) private var dismiss
    
    let chatName: String

    // Attachments state
    @State private var selectedPhoto: PhotosPickerItem?
    @State private var showPhotoPicker = false
    @State private var showCamera = false
    @State private var showDocumentPicker = false
    @State private var selectedDocumentURL: URL?

    // Reply / menu state
    @State private var replyingTo: ChatMessage?
    @State private var menuMessage: ChatMessage? = nil
    
    @State private var menuTarget: (message: ChatMessage, isLastInGroup: Bool, frame: CGRect)?
    private let scrollSpace = "chatScroll"
    
    // Chat state
    @State private var showChatInfo = false
    @State private var messageText: String = ""
    @State private var messages: [ChatMessage] = [
        // –ì—Ä—É–ø–∞ 1 (—ñ–Ω—à–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —â—ñ–ª—å–Ω–æ)
        .init(text: "–ü—Ä–∏–≤—ñ—Ç! üëã",                  isSentByUser: false, createdAt: Date().addingTimeInterval(-60*180)),
        .init(text: "–Ñ —Ö–≤–∏–ª–∏–Ω–∫–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏?",      isSentByUser: false, createdAt: Date().addingTimeInterval(-60*179)),
        .init(text: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ—Ä–∞–¥–∞",             isSentByUser: false, createdAt: Date().addingTimeInterval(-60*177)),

        // –ì—Ä—É–ø–∞ 2 (—è, –±–ª–∏–∑—å–∫–æ)
        .init(text: "–ü—Ä–∏–≤—ñ—Ç! –ó–≤—ñ—Å–Ω–æ üôÇ",           isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*175)),
        .init(text: "–ü—Ä–æ —â–æ —Å–∞–º–µ?",                isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*174)),

        // –ì—Ä—É–ø–∞ 3 (—ñ–Ω—à–∏–π, –ø—ñ—Å–ª—è 20 —Ö–≤ ‚Äî –Ω–æ–≤–∞ –≥—Ä—É–ø–∞)
        .init(text: "–î—É–º–∞—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ UI —á–∞—Ç—É",    isSentByUser: false, createdAt: Date().addingTimeInterval(-60*154)),

        // –ì—Ä—É–ø–∞ 4 (—è, –±–ª–∏–∑—å–∫–æ)
        .init(text: "–ö–ª–∞—Å–Ω–∞ —ñ–¥–µ—è!",                isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*153)),
        .init(text: "–ú–æ–∂–µ–º–æ –ø–æ—á–∞—Ç–∏ –∑ –±—É–ª—å–±–∞—à–æ–∫",   isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*152)),

        // –ì—Ä—É–ø–∞ 5 (—ñ–Ω—à–∏–π, +2 –≥–æ–¥ ‚Äî –Ω–æ–≤–∞ –≥—Ä—É–ø–∞)
        .init(text: "–î–æ–¥–∞–≤ —Ö–≤–æ—Å—Ç–∏–∫ –¥–æ –±—É–ª—å–±–∞—à–∫–∏",  isSentByUser: false, createdAt: Date().addingTimeInterval(-60*120)),
        .init(text: "–ü–æ–≥–ª—è–Ω—å, –æ–∫?",                isSentByUser: false, createdAt: Date().addingTimeInterval(-60*119)),

        // –ì—Ä—É–ø–∞ 6 (—è)
        .init(text: "–í–∏–≥–ª—è–¥–∞—î –¥–æ–±—Ä–µ üëç",           isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*117)),
        .init(text: "–¢—Ä–æ—Ö–∏ –ø—ñ–¥–∫—Ä—É—á—É –∫—Ä–∏–≤—É –ë–µ–∑—å—î",  isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*116)),
        .init(text: "–Ü –±—É–¥–µ —Å—É–ø–µ—Ä",                isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*115)),

        // –ì—Ä—É–ø–∞ 7 (—ñ–Ω—à–∏–π, +1 –≥–æ–¥ ‚Äî –Ω–æ–≤–∞ –≥—Ä—É–ø–∞)
        .init(text: "–©–æ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏ –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏?",isSentByUser: false, createdAt: Date().addingTimeInterval(-60*60)),

        // –ì—Ä—É–ø–∞ 8 (—è)
        .init(text: "–ó—Ä–æ–±–∏–≤ 2pt –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≥—Ä—É–ø–∏",  isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*59)),
        .init(text: "–Ü 8pt –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏",           isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*58)),

        // –ì—Ä—É–ø–∞ 9 (—ñ–Ω—à–∏–π, 13 —Ö–≤ ‚Äî –Ω–æ–≤–∞ –≥—Ä—É–ø–∞)
        .init(text: "–°—É–ø–µ—Ä. –ê —á–∞—Å –ø–æ—Ä—É—á —ñ–∑ —Ç–µ–∫—Å—Ç–æ–º?", isSentByUser: false, createdAt: Date().addingTimeInterval(-60*45)),
        .init(text: "–Ø–∫ —É Telegram",                isSentByUser: false, createdAt: Date().addingTimeInterval(-60*44)),

        // –ì—Ä—É–ø–∞ 10 (—è)
        .init(text: "–¢–∞–∫, –º—ñ—Ä—è—é —à–∏—Ä–∏–Ω—É",           isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*30)),
        .init(text: "–Ø–∫—â–æ –Ω–µ –≤–º—ñ—â—É—î—Ç—å—Å—è ‚Äî –≤–Ω–∏–∑",   isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*29)),

        // –ì—Ä—É–ø–∞ 11 (—ñ–Ω—à–∏–π)
        .init(text: "–¢–µ–ø–µ—Ä –± —Ö–æ—Ç—ñ–≤ –≥—Ä–∞–¥—ñ—î–Ω—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –µ–∫—Ä–∞–Ω—É", isSentByUser: false, createdAt: Date().addingTimeInterval(-60*15)),

        // –ì—Ä—É–ø–∞ 12 (—è)
        .init(text: "–î–æ–¥–∞–≤ –ª–µ–≥–∫–∏–π –∑–≤–µ—Ä—Ö—É-–≤–Ω–∏–∑",    isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*14)),
        .init(text: "–ü–∞—Å—É—î –¥–æ —Ç–µ–º–∏",               isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*10)),
        .init(text: "–õ–µ–¥—å –ø–æ–º—ñ—Ç–Ω–∏–π",               isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*9)),

        // –ì—Ä—É–ø–∞ 13 (—ñ–Ω—à–∏–π)
        .init(text: "–ß—É–¥–æ–≤–æ, –¥—è–∫—É—é!",              isSentByUser: false, createdAt: Date().addingTimeInterval(-60*5)),
        .init(text: "–©–µ –ø—ñ–¥–∫–æ—Ä–∏–≥—É—é –∫–æ–ª—ñ—Ä",         isSentByUser: false, createdAt: Date().addingTimeInterval(-60*4)),

        // –ì—Ä—É–ø–∞ 14 (—è)
        .init(text: "–û–∫, –ø—ñ–Ω–≥–∞–Ω–∏ —è–∫—â–æ —â–æ",         isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*3)),
        .init(text: "–ì–æ—Ç–æ–≤–æ üëå",                   isSentByUser: true,  createdAt: Date().addingTimeInterval(-60*2)),

        // –ì—Ä—É–ø–∞ 15 (—ñ–Ω—à–∏–π)
        .init(text: "–ë–∞—á—É. –í—Å–µ –ø—Ä–∞—Ü—é—î!",           isSentByUser: false, createdAt: Date().addingTimeInterval(-60*1)),

        // –û—Å—Ç–∞–Ω–Ω—î (—è)
        .init(text: "üî• –¢–æ–¥—ñ –∑–ª–∏–≤–∞—é –≤ main",        isSentByUser: true,  createdAt: Date())
    ]

    var body: some View {
        ZStack(alignment: .top) {
            ChatHeader(
                chatName: chatName,
                onBack: {
                    dismiss()
                },
                onInfo: {
                    showChatInfo = true
                }
            )
            .zIndex(10)
            
            VStack(spacing: 0) {
                MessageList(
                    messages: $messages,
                    onLongPressWithFrame: { msg, isLast, frame in
                        UIImpactFeedbackGenerator(style: .light).impactOccurred()
                        withAnimation(.spring(response: 0.32, dampingFraction: 0.86)) {
                            menuTarget = (msg, isLast, frame)
                        }
                    },
                    spaceName: scrollSpace
                )
                .padding(.top, 20)

                Divider()

                if let replying = replyingTo {
                    ReplyPreview(message: replying) { replyingTo = nil }
                }

                InputBar(
                    text: $messageText,
                    onSend: sendMessage,
                    onChoosePhoto: { showPhotoPicker = true },
                    onTakePhoto: { showCamera = true },
                    onAttachFile: { showDocumentPicker = true }
                )
                .padding(.horizontal)
                .padding(.vertical, 6)
                .background(.ultraThinMaterial)
            }
            .padding(.top, 30)
        }
        .toolbar(.hidden, for: .tabBar)
        .toolbar(.hidden, for: .navigationBar)
        .sheet(isPresented: $showChatInfo) { ChatInfoView(chatName: chatName) }
        .photosPicker(isPresented: $showPhotoPicker, selection: $selectedPhoto)
        .sheet(isPresented: $showCamera) { Text("Camera not implemented") }
        .fileImporter(isPresented: $showDocumentPicker, allowedContentTypes: [.item]) { result in
            switch result {
            case .success(let url):
                selectedDocumentURL = url
                print("Selected document: \(url)")
            case .failure(let error):
                print("Document selection error: \(error.localizedDescription)")
            }
        }
        .background(
            Image("ChatBackground")
                .resizable(resizingMode: .tile)
                .interpolation(.none)
        )
        .overlay(
            Group {
                if let t = menuTarget {
                    ZStack {
                        // –±–µ–∫–¥—Ä–æ–ø
                        Color.clear
                            .background(.ultraThinMaterial)
                            .overlay(Color.black.opacity(0.08))
                            .ignoresSafeArea()
                            .onTapGesture {
                                withAnimation(.spring(response: 0.32, dampingFraction: 0.86)) {
                                    menuTarget = nil
                                }
                            }

                        
                        HStack {
                            if (t.message.isSentByUser) {
                                Spacer()
                            }
                            
                            ContextMenuOverlay(
                                textMessage: .constant(
                                    TextMessage(message: t.message, isLastInGroup: t.isLastInGroup)
                                ),
                                onReply:  { msg in replyingTo = msg; menuTarget = nil },
                                onForward:{ msg in forward(msg);    menuTarget = nil },
                                onCopy:   { _   in UIPasteboard.general.string = t.message.text; menuTarget = nil },
                                onDelete: { msg in delete(msg);     menuTarget = nil }
                            )
                            .transition(.scale.combined(with: .opacity))
                            
                            if (!t.message.isSentByUser) {
                                Spacer()
                            }
                        }
                    }
                    .animation(.spring(response: 0.32, dampingFraction: 0.86),
                               value: menuTarget != nil)
                }
            }
        )

    }

    private func sendMessage() {
        let trimmed = messageText.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmed.isEmpty else { return }
        messages.append(.init(id: UUID(), text: trimmed, isSentByUser: true))
        messageText = ""
        replyingTo = nil
    }

    private func forward(_ msg: ChatMessage) {
        print("Forward: \(msg.text)")
    }

    private func delete(_ msg: ChatMessage) {
        messages.removeAll { $0.id == msg.id }
    }
}

#Preview {
    ChatView(chatName: "Roman")
}
