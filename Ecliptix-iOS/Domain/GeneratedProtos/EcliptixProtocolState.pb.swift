// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: EcliptixProtocolState.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Ecliptix_Proto_EcliptixSecrecyChannelState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var connectID: UInt32 = 0

  public var identityKeys: Ecliptix_Proto_IdentityKeysState {
    get {return _identityKeys ?? Ecliptix_Proto_IdentityKeysState()}
    set {_identityKeys = newValue}
  }
  /// Returns true if `identityKeys` has been explicitly set.
  public var hasIdentityKeys: Bool {return self._identityKeys != nil}
  /// Clears the value of `identityKeys`. Subsequent reads from it will return its default value.
  public mutating func clearIdentityKeys() {self._identityKeys = nil}

  public var peerHandshakeMessage: Ecliptix_Proto_PubKeyExchange {
    get {return _peerHandshakeMessage ?? Ecliptix_Proto_PubKeyExchange()}
    set {_peerHandshakeMessage = newValue}
  }
  /// Returns true if `peerHandshakeMessage` has been explicitly set.
  public var hasPeerHandshakeMessage: Bool {return self._peerHandshakeMessage != nil}
  /// Clears the value of `peerHandshakeMessage`. Subsequent reads from it will return its default value.
  public mutating func clearPeerHandshakeMessage() {self._peerHandshakeMessage = nil}

  public var ratchetState: Ecliptix_Proto_RatchetState {
    get {return _ratchetState ?? Ecliptix_Proto_RatchetState()}
    set {_ratchetState = newValue}
  }
  /// Returns true if `ratchetState` has been explicitly set.
  public var hasRatchetState: Bool {return self._ratchetState != nil}
  /// Clears the value of `ratchetState`. Subsequent reads from it will return its default value.
  public mutating func clearRatchetState() {self._ratchetState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _identityKeys: Ecliptix_Proto_IdentityKeysState? = nil
  fileprivate var _peerHandshakeMessage: Ecliptix_Proto_PubKeyExchange? = nil
  fileprivate var _ratchetState: Ecliptix_Proto_RatchetState? = nil
}

public struct Ecliptix_Proto_IdentityKeysState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ed25519SecretKey: Data = Data()

  public var identityX25519SecretKey: Data = Data()

  public var signedPreKeySecret: Data = Data()

  public var oneTimePreKeys: [Ecliptix_Proto_OneTimePreKeySecret] = []

  public var ed25519PublicKey: Data = Data()

  public var identityX25519PublicKey: Data = Data()

  public var signedPreKeyID: UInt32 = 0

  public var signedPreKeyPublic: Data = Data()

  public var signedPreKeySignature: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_OneTimePreKeySecret: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var preKeyID: UInt32 = 0

  public var privateKey: Data = Data()

  public var publicKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_RatchetState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isInitiator: Bool {
    get {return _storage._isInitiator}
    set {_uniqueStorage()._isInitiator = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var nonceCounter: UInt64 {
    get {return _storage._nonceCounter}
    set {_uniqueStorage()._nonceCounter = newValue}
  }

  public var peerBundle: Ecliptix_Proto_PublicKeyBundle {
    get {return _storage._peerBundle ?? Ecliptix_Proto_PublicKeyBundle()}
    set {_uniqueStorage()._peerBundle = newValue}
  }
  /// Returns true if `peerBundle` has been explicitly set.
  public var hasPeerBundle: Bool {return _storage._peerBundle != nil}
  /// Clears the value of `peerBundle`. Subsequent reads from it will return its default value.
  public mutating func clearPeerBundle() {_uniqueStorage()._peerBundle = nil}

  public var peerDhPublicKey: Data {
    get {return _storage._peerDhPublicKey}
    set {_uniqueStorage()._peerDhPublicKey = newValue}
  }

  public var isFirstReceivingRatchet: Bool {
    get {return _storage._isFirstReceivingRatchet}
    set {_uniqueStorage()._isFirstReceivingRatchet = newValue}
  }

  public var rootKey: Data {
    get {return _storage._rootKey}
    set {_uniqueStorage()._rootKey = newValue}
  }

  public var sendingStep: Ecliptix_Proto_ChainStepState {
    get {return _storage._sendingStep ?? Ecliptix_Proto_ChainStepState()}
    set {_uniqueStorage()._sendingStep = newValue}
  }
  /// Returns true if `sendingStep` has been explicitly set.
  public var hasSendingStep: Bool {return _storage._sendingStep != nil}
  /// Clears the value of `sendingStep`. Subsequent reads from it will return its default value.
  public mutating func clearSendingStep() {_uniqueStorage()._sendingStep = nil}

  public var receivingStep: Ecliptix_Proto_ChainStepState {
    get {return _storage._receivingStep ?? Ecliptix_Proto_ChainStepState()}
    set {_uniqueStorage()._receivingStep = newValue}
  }
  /// Returns true if `receivingStep` has been explicitly set.
  public var hasReceivingStep: Bool {return _storage._receivingStep != nil}
  /// Clears the value of `receivingStep`. Subsequent reads from it will return its default value.
  public mutating func clearReceivingStep() {_uniqueStorage()._receivingStep = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Ecliptix_Proto_ChainStepState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var currentIndex: UInt32 = 0

  public var chainKey: Data = Data()

  public var dhPrivateKey: Data = Data()

  public var dhPublicKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ecliptix.proto"

extension Ecliptix_Proto_EcliptixSecrecyChannelState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EcliptixSecrecyChannelState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "connect_id"),
    2: .standard(proto: "identity_keys"),
    3: .standard(proto: "peer_handshake_message"),
    4: .standard(proto: "ratchet_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.connectID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._identityKeys) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._peerHandshakeMessage) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ratchetState) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.connectID != 0 {
      try visitor.visitSingularUInt32Field(value: self.connectID, fieldNumber: 1)
    }
    try { if let v = self._identityKeys {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._peerHandshakeMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._ratchetState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_EcliptixSecrecyChannelState, rhs: Ecliptix_Proto_EcliptixSecrecyChannelState) -> Bool {
    if lhs.connectID != rhs.connectID {return false}
    if lhs._identityKeys != rhs._identityKeys {return false}
    if lhs._peerHandshakeMessage != rhs._peerHandshakeMessage {return false}
    if lhs._ratchetState != rhs._ratchetState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_IdentityKeysState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IdentityKeysState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ed25519_secret_key"),
    2: .standard(proto: "identity_x25519_secret_key"),
    4: .standard(proto: "signed_pre_key_secret"),
    5: .standard(proto: "one_time_pre_keys"),
    10: .standard(proto: "ed25519_public_key"),
    11: .standard(proto: "identity_x25519_public_key"),
    12: .standard(proto: "signed_pre_key_id"),
    13: .standard(proto: "signed_pre_key_public"),
    14: .standard(proto: "signed_pre_key_signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.ed25519SecretKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.identityX25519SecretKey) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeySecret) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.oneTimePreKeys) }()
      case 10: try { try decoder.decodeSingularBytesField(value: &self.ed25519PublicKey) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.identityX25519PublicKey) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.signedPreKeyID) }()
      case 13: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeyPublic) }()
      case 14: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeySignature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ed25519SecretKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.ed25519SecretKey, fieldNumber: 1)
    }
    if !self.identityX25519SecretKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityX25519SecretKey, fieldNumber: 2)
    }
    if !self.signedPreKeySecret.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeySecret, fieldNumber: 4)
    }
    if !self.oneTimePreKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oneTimePreKeys, fieldNumber: 5)
    }
    if !self.ed25519PublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.ed25519PublicKey, fieldNumber: 10)
    }
    if !self.identityX25519PublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityX25519PublicKey, fieldNumber: 11)
    }
    if self.signedPreKeyID != 0 {
      try visitor.visitSingularUInt32Field(value: self.signedPreKeyID, fieldNumber: 12)
    }
    if !self.signedPreKeyPublic.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeyPublic, fieldNumber: 13)
    }
    if !self.signedPreKeySignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeySignature, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_IdentityKeysState, rhs: Ecliptix_Proto_IdentityKeysState) -> Bool {
    if lhs.ed25519SecretKey != rhs.ed25519SecretKey {return false}
    if lhs.identityX25519SecretKey != rhs.identityX25519SecretKey {return false}
    if lhs.signedPreKeySecret != rhs.signedPreKeySecret {return false}
    if lhs.oneTimePreKeys != rhs.oneTimePreKeys {return false}
    if lhs.ed25519PublicKey != rhs.ed25519PublicKey {return false}
    if lhs.identityX25519PublicKey != rhs.identityX25519PublicKey {return false}
    if lhs.signedPreKeyID != rhs.signedPreKeyID {return false}
    if lhs.signedPreKeyPublic != rhs.signedPreKeyPublic {return false}
    if lhs.signedPreKeySignature != rhs.signedPreKeySignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_OneTimePreKeySecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OneTimePreKeySecret"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pre_key_id"),
    2: .standard(proto: "private_key"),
    3: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.preKeyID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.preKeyID != 0 {
      try visitor.visitSingularUInt32Field(value: self.preKeyID, fieldNumber: 1)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 2)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_OneTimePreKeySecret, rhs: Ecliptix_Proto_OneTimePreKeySecret) -> Bool {
    if lhs.preKeyID != rhs.preKeyID {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_RatchetState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RatchetState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_initiator"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "nonce_counter"),
    4: .standard(proto: "peer_bundle"),
    5: .standard(proto: "peer_dh_public_key"),
    6: .standard(proto: "is_first_receiving_ratchet"),
    10: .standard(proto: "root_key"),
    11: .standard(proto: "sending_step"),
    12: .standard(proto: "receiving_step"),
  ]

  fileprivate class _StorageClass {
    var _isInitiator: Bool = false
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _nonceCounter: UInt64 = 0
    var _peerBundle: Ecliptix_Proto_PublicKeyBundle? = nil
    var _peerDhPublicKey: Data = Data()
    var _isFirstReceivingRatchet: Bool = false
    var _rootKey: Data = Data()
    var _sendingStep: Ecliptix_Proto_ChainStepState? = nil
    var _receivingStep: Ecliptix_Proto_ChainStepState? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _isInitiator = source._isInitiator
      _createdAt = source._createdAt
      _nonceCounter = source._nonceCounter
      _peerBundle = source._peerBundle
      _peerDhPublicKey = source._peerDhPublicKey
      _isFirstReceivingRatchet = source._isFirstReceivingRatchet
      _rootKey = source._rootKey
      _sendingStep = source._sendingStep
      _receivingStep = source._receivingStep
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._isInitiator) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._nonceCounter) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._peerBundle) }()
        case 5: try { try decoder.decodeSingularBytesField(value: &_storage._peerDhPublicKey) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._isFirstReceivingRatchet) }()
        case 10: try { try decoder.decodeSingularBytesField(value: &_storage._rootKey) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._sendingStep) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._receivingStep) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._isInitiator != false {
        try visitor.visitSingularBoolField(value: _storage._isInitiator, fieldNumber: 1)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._nonceCounter != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._nonceCounter, fieldNumber: 3)
      }
      try { if let v = _storage._peerBundle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._peerDhPublicKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._peerDhPublicKey, fieldNumber: 5)
      }
      if _storage._isFirstReceivingRatchet != false {
        try visitor.visitSingularBoolField(value: _storage._isFirstReceivingRatchet, fieldNumber: 6)
      }
      if !_storage._rootKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._rootKey, fieldNumber: 10)
      }
      try { if let v = _storage._sendingStep {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._receivingStep {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_RatchetState, rhs: Ecliptix_Proto_RatchetState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._isInitiator != rhs_storage._isInitiator {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._nonceCounter != rhs_storage._nonceCounter {return false}
        if _storage._peerBundle != rhs_storage._peerBundle {return false}
        if _storage._peerDhPublicKey != rhs_storage._peerDhPublicKey {return false}
        if _storage._isFirstReceivingRatchet != rhs_storage._isFirstReceivingRatchet {return false}
        if _storage._rootKey != rhs_storage._rootKey {return false}
        if _storage._sendingStep != rhs_storage._sendingStep {return false}
        if _storage._receivingStep != rhs_storage._receivingStep {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_ChainStepState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChainStepState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_index"),
    2: .standard(proto: "chain_key"),
    3: .standard(proto: "dh_private_key"),
    4: .standard(proto: "dh_public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.currentIndex) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.chainKey) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.dhPrivateKey) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.dhPublicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currentIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.currentIndex, fieldNumber: 1)
    }
    if !self.chainKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.chainKey, fieldNumber: 2)
    }
    if !self.dhPrivateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.dhPrivateKey, fieldNumber: 3)
    }
    if !self.dhPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.dhPublicKey, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_ChainStepState, rhs: Ecliptix_Proto_ChainStepState) -> Bool {
    if lhs.currentIndex != rhs.currentIndex {return false}
    if lhs.chainKey != rhs.chainKey {return false}
    if lhs.dhPrivateKey != rhs.dhPrivateKey {return false}
    if lhs.dhPublicKey != rhs.dhPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
