//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: AuthenticationServices.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Ecliptix_Proto_Membership_AuthVerificationServicesClient`, then call methods of this protocol to make API calls.
internal protocol Ecliptix_Proto_Membership_AuthVerificationServicesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol? { get }

  func initiateVerification(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?,
    handler: @escaping (Ecliptix_Proto_CipherPayload) -> Void
  ) -> ServerStreamingCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func verifyOtp(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func validatePhoneNumber(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func recoverySecretKeyPhoneVerification(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>
}

extension Ecliptix_Proto_Membership_AuthVerificationServicesClientProtocol {
  internal var serviceName: String {
    return "ecliptix.proto.membership.AuthVerificationServices"
  }

  /// Server streaming call to InitiateVerification
  ///
  /// - Parameters:
  ///   - request: Request to send to InitiateVerification.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func initiateVerification(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil,
    handler: @escaping (Ecliptix_Proto_CipherPayload) -> Void
  ) -> ServerStreamingCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeServerStreamingCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.initiateVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitiateVerificationInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to VerifyOtp
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyOtp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func verifyOtp(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.verifyOtp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyOtpInterceptors() ?? []
    )
  }

  /// Unary call to ValidatePhoneNumber
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatePhoneNumber.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatePhoneNumber(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.validatePhoneNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePhoneNumberInterceptors() ?? []
    )
  }

  /// Unary call to RecoverySecretKeyPhoneVerification
  ///
  /// - Parameters:
  ///   - request: Request to send to RecoverySecretKeyPhoneVerification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recoverySecretKeyPhoneVerification(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.recoverySecretKeyPhoneVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecoverySecretKeyPhoneVerificationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ecliptix_Proto_Membership_AuthVerificationServicesClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ecliptix_Proto_Membership_AuthVerificationServicesNIOClient")
internal final class Ecliptix_Proto_Membership_AuthVerificationServicesClient: Ecliptix_Proto_Membership_AuthVerificationServicesClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ecliptix.proto.membership.AuthVerificationServices service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ecliptix_Proto_Membership_AuthVerificationServicesNIOClient: Ecliptix_Proto_Membership_AuthVerificationServicesClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol?

  /// Creates a client for the ecliptix.proto.membership.AuthVerificationServices service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ecliptix_Proto_Membership_AuthVerificationServicesAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol? { get }

  func makeInitiateVerificationCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func makeVerifyOtpCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func makeValidatePhoneNumberCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func makeRecoverySecretKeyPhoneVerificationCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_Membership_AuthVerificationServicesAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeInitiateVerificationCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeAsyncServerStreamingCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.initiateVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitiateVerificationInterceptors() ?? []
    )
  }

  internal func makeVerifyOtpCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.verifyOtp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyOtpInterceptors() ?? []
    )
  }

  internal func makeValidatePhoneNumberCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.validatePhoneNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePhoneNumberInterceptors() ?? []
    )
  }

  internal func makeRecoverySecretKeyPhoneVerificationCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.recoverySecretKeyPhoneVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecoverySecretKeyPhoneVerificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_Membership_AuthVerificationServicesAsyncClientProtocol {
  internal func initiateVerification(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Ecliptix_Proto_CipherPayload> {
    return self.performAsyncServerStreamingCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.initiateVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitiateVerificationInterceptors() ?? []
    )
  }

  internal func verifyOtp(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) async throws -> Ecliptix_Proto_CipherPayload {
    return try await self.performAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.verifyOtp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyOtpInterceptors() ?? []
    )
  }

  internal func validatePhoneNumber(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) async throws -> Ecliptix_Proto_CipherPayload {
    return try await self.performAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.validatePhoneNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePhoneNumberInterceptors() ?? []
    )
  }

  internal func recoverySecretKeyPhoneVerification(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) async throws -> Ecliptix_Proto_CipherPayload {
    return try await self.performAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.recoverySecretKeyPhoneVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecoverySecretKeyPhoneVerificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ecliptix_Proto_Membership_AuthVerificationServicesAsyncClient: Ecliptix_Proto_Membership_AuthVerificationServicesAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ecliptix_Proto_Membership_AuthVerificationServicesClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'initiateVerification'.
  func makeInitiateVerificationInterceptors() -> [ClientInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when invoking 'verifyOtp'.
  func makeVerifyOtpInterceptors() -> [ClientInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when invoking 'validatePhoneNumber'.
  func makeValidatePhoneNumberInterceptors() -> [ClientInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when invoking 'recoverySecretKeyPhoneVerification'.
  func makeRecoverySecretKeyPhoneVerificationInterceptors() -> [ClientInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]
}

internal enum Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthVerificationServices",
    fullName: "ecliptix.proto.membership.AuthVerificationServices",
    methods: [
      Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.initiateVerification,
      Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.verifyOtp,
      Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.validatePhoneNumber,
      Ecliptix_Proto_Membership_AuthVerificationServicesClientMetadata.Methods.recoverySecretKeyPhoneVerification,
    ]
  )

  internal enum Methods {
    internal static let initiateVerification = GRPCMethodDescriptor(
      name: "InitiateVerification",
      path: "/ecliptix.proto.membership.AuthVerificationServices/InitiateVerification",
      type: GRPCCallType.serverStreaming
    )

    internal static let verifyOtp = GRPCMethodDescriptor(
      name: "VerifyOtp",
      path: "/ecliptix.proto.membership.AuthVerificationServices/VerifyOtp",
      type: GRPCCallType.unary
    )

    internal static let validatePhoneNumber = GRPCMethodDescriptor(
      name: "ValidatePhoneNumber",
      path: "/ecliptix.proto.membership.AuthVerificationServices/ValidatePhoneNumber",
      type: GRPCCallType.unary
    )

    internal static let recoverySecretKeyPhoneVerification = GRPCMethodDescriptor(
      name: "RecoverySecretKeyPhoneVerification",
      path: "/ecliptix.proto.membership.AuthVerificationServices/RecoverySecretKeyPhoneVerification",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Ecliptix_Proto_Membership_AuthVerificationServicesProvider: CallHandlerProvider {
  var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesServerInterceptorFactoryProtocol? { get }

  func initiateVerification(request: Ecliptix_Proto_CipherPayload, context: StreamingResponseCallContext<Ecliptix_Proto_CipherPayload>) -> EventLoopFuture<GRPCStatus>

  func verifyOtp(request: Ecliptix_Proto_CipherPayload, context: StatusOnlyCallContext) -> EventLoopFuture<Ecliptix_Proto_CipherPayload>

  func validatePhoneNumber(request: Ecliptix_Proto_CipherPayload, context: StatusOnlyCallContext) -> EventLoopFuture<Ecliptix_Proto_CipherPayload>

  func recoverySecretKeyPhoneVerification(request: Ecliptix_Proto_CipherPayload, context: StatusOnlyCallContext) -> EventLoopFuture<Ecliptix_Proto_CipherPayload>
}

extension Ecliptix_Proto_Membership_AuthVerificationServicesProvider {
  internal var serviceName: Substring {
    return Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "InitiateVerification":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeInitiateVerificationInterceptors() ?? [],
        userFunction: self.initiateVerification(request:context:)
      )

    case "VerifyOtp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeVerifyOtpInterceptors() ?? [],
        userFunction: self.verifyOtp(request:context:)
      )

    case "ValidatePhoneNumber":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeValidatePhoneNumberInterceptors() ?? [],
        userFunction: self.validatePhoneNumber(request:context:)
      )

    case "RecoverySecretKeyPhoneVerification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeRecoverySecretKeyPhoneVerificationInterceptors() ?? [],
        userFunction: self.recoverySecretKeyPhoneVerification(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ecliptix_Proto_Membership_AuthVerificationServicesAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesServerInterceptorFactoryProtocol? { get }

  func initiateVerification(
    request: Ecliptix_Proto_CipherPayload,
    responseStream: GRPCAsyncResponseStreamWriter<Ecliptix_Proto_CipherPayload>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func verifyOtp(
    request: Ecliptix_Proto_CipherPayload,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ecliptix_Proto_CipherPayload

  func validatePhoneNumber(
    request: Ecliptix_Proto_CipherPayload,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ecliptix_Proto_CipherPayload

  func recoverySecretKeyPhoneVerification(
    request: Ecliptix_Proto_CipherPayload,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ecliptix_Proto_CipherPayload
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_Membership_AuthVerificationServicesAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ecliptix_Proto_Membership_AuthVerificationServicesServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "InitiateVerification":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeInitiateVerificationInterceptors() ?? [],
        wrapping: { try await self.initiateVerification(request: $0, responseStream: $1, context: $2) }
      )

    case "VerifyOtp":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeVerifyOtpInterceptors() ?? [],
        wrapping: { try await self.verifyOtp(request: $0, context: $1) }
      )

    case "ValidatePhoneNumber":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeValidatePhoneNumberInterceptors() ?? [],
        wrapping: { try await self.validatePhoneNumber(request: $0, context: $1) }
      )

    case "RecoverySecretKeyPhoneVerification":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeRecoverySecretKeyPhoneVerificationInterceptors() ?? [],
        wrapping: { try await self.recoverySecretKeyPhoneVerification(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Ecliptix_Proto_Membership_AuthVerificationServicesServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'initiateVerification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInitiateVerificationInterceptors() -> [ServerInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when handling 'verifyOtp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVerifyOtpInterceptors() -> [ServerInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when handling 'validatePhoneNumber'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatePhoneNumberInterceptors() -> [ServerInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when handling 'recoverySecretKeyPhoneVerification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecoverySecretKeyPhoneVerificationInterceptors() -> [ServerInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]
}

internal enum Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthVerificationServices",
    fullName: "ecliptix.proto.membership.AuthVerificationServices",
    methods: [
      Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata.Methods.initiateVerification,
      Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata.Methods.verifyOtp,
      Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata.Methods.validatePhoneNumber,
      Ecliptix_Proto_Membership_AuthVerificationServicesServerMetadata.Methods.recoverySecretKeyPhoneVerification,
    ]
  )

  internal enum Methods {
    internal static let initiateVerification = GRPCMethodDescriptor(
      name: "InitiateVerification",
      path: "/ecliptix.proto.membership.AuthVerificationServices/InitiateVerification",
      type: GRPCCallType.serverStreaming
    )

    internal static let verifyOtp = GRPCMethodDescriptor(
      name: "VerifyOtp",
      path: "/ecliptix.proto.membership.AuthVerificationServices/VerifyOtp",
      type: GRPCCallType.unary
    )

    internal static let validatePhoneNumber = GRPCMethodDescriptor(
      name: "ValidatePhoneNumber",
      path: "/ecliptix.proto.membership.AuthVerificationServices/ValidatePhoneNumber",
      type: GRPCCallType.unary
    )

    internal static let recoverySecretKeyPhoneVerification = GRPCMethodDescriptor(
      name: "RecoverySecretKeyPhoneVerification",
      path: "/ecliptix.proto.membership.AuthVerificationServices/RecoverySecretKeyPhoneVerification",
      type: GRPCCallType.unary
    )
  }
}
