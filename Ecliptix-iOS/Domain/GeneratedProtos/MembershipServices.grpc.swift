//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: MembershipServices.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Ecliptix_Proto_Membership_MembershipServicesClient`, then call methods of this protocol to make API calls.
internal protocol Ecliptix_Proto_Membership_MembershipServicesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol? { get }

  func updateMembershipWithSecureKey(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func signInMembership(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>
}

extension Ecliptix_Proto_Membership_MembershipServicesClientProtocol {
  internal var serviceName: String {
    return "ecliptix.proto.membership.MembershipServices"
  }

  /// Unary call to UpdateMembershipWithSecureKey
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateMembershipWithSecureKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateMembershipWithSecureKey(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeUnaryCall(
      path: Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.updateMembershipWithSecureKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMembershipWithSecureKeyInterceptors() ?? []
    )
  }

  /// Unary call to SignInMembership
  ///
  /// - Parameters:
  ///   - request: Request to send to SignInMembership.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signInMembership(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeUnaryCall(
      path: Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.signInMembership.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignInMembershipInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ecliptix_Proto_Membership_MembershipServicesClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ecliptix_Proto_Membership_MembershipServicesNIOClient")
internal final class Ecliptix_Proto_Membership_MembershipServicesClient: Ecliptix_Proto_Membership_MembershipServicesClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ecliptix.proto.membership.MembershipServices service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ecliptix_Proto_Membership_MembershipServicesNIOClient: Ecliptix_Proto_Membership_MembershipServicesClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol?

  /// Creates a client for the ecliptix.proto.membership.MembershipServices service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ecliptix_Proto_Membership_MembershipServicesAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol? { get }

  func makeUpdateMembershipWithSecureKeyCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>

  func makeSignInMembershipCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_Membership_MembershipServicesAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ecliptix_Proto_Membership_MembershipServicesClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpdateMembershipWithSecureKeyCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.updateMembershipWithSecureKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMembershipWithSecureKeyInterceptors() ?? []
    )
  }

  internal func makeSignInMembershipCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.signInMembership.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignInMembershipInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_Membership_MembershipServicesAsyncClientProtocol {
  internal func updateMembershipWithSecureKey(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) async throws -> Ecliptix_Proto_CipherPayload {
    return try await self.performAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.updateMembershipWithSecureKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMembershipWithSecureKeyInterceptors() ?? []
    )
  }

  internal func signInMembership(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) async throws -> Ecliptix_Proto_CipherPayload {
    return try await self.performAsyncUnaryCall(
      path: Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.signInMembership.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignInMembershipInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ecliptix_Proto_Membership_MembershipServicesAsyncClient: Ecliptix_Proto_Membership_MembershipServicesAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ecliptix_Proto_Membership_MembershipServicesClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateMembershipWithSecureKey'.
  func makeUpdateMembershipWithSecureKeyInterceptors() -> [ClientInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when invoking 'signInMembership'.
  func makeSignInMembershipInterceptors() -> [ClientInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]
}

internal enum Ecliptix_Proto_Membership_MembershipServicesClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MembershipServices",
    fullName: "ecliptix.proto.membership.MembershipServices",
    methods: [
      Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.updateMembershipWithSecureKey,
      Ecliptix_Proto_Membership_MembershipServicesClientMetadata.Methods.signInMembership,
    ]
  )

  internal enum Methods {
    internal static let updateMembershipWithSecureKey = GRPCMethodDescriptor(
      name: "UpdateMembershipWithSecureKey",
      path: "/ecliptix.proto.membership.MembershipServices/UpdateMembershipWithSecureKey",
      type: GRPCCallType.unary
    )

    internal static let signInMembership = GRPCMethodDescriptor(
      name: "SignInMembership",
      path: "/ecliptix.proto.membership.MembershipServices/SignInMembership",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Ecliptix_Proto_Membership_MembershipServicesProvider: CallHandlerProvider {
  var interceptors: Ecliptix_Proto_Membership_MembershipServicesServerInterceptorFactoryProtocol? { get }

  func updateMembershipWithSecureKey(request: Ecliptix_Proto_CipherPayload, context: StatusOnlyCallContext) -> EventLoopFuture<Ecliptix_Proto_CipherPayload>

  func signInMembership(request: Ecliptix_Proto_CipherPayload, context: StatusOnlyCallContext) -> EventLoopFuture<Ecliptix_Proto_CipherPayload>
}

extension Ecliptix_Proto_Membership_MembershipServicesProvider {
  internal var serviceName: Substring {
    return Ecliptix_Proto_Membership_MembershipServicesServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateMembershipWithSecureKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeUpdateMembershipWithSecureKeyInterceptors() ?? [],
        userFunction: self.updateMembershipWithSecureKey(request:context:)
      )

    case "SignInMembership":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeSignInMembershipInterceptors() ?? [],
        userFunction: self.signInMembership(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ecliptix_Proto_Membership_MembershipServicesAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ecliptix_Proto_Membership_MembershipServicesServerInterceptorFactoryProtocol? { get }

  func updateMembershipWithSecureKey(
    request: Ecliptix_Proto_CipherPayload,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ecliptix_Proto_CipherPayload

  func signInMembership(
    request: Ecliptix_Proto_CipherPayload,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ecliptix_Proto_CipherPayload
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_Membership_MembershipServicesAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ecliptix_Proto_Membership_MembershipServicesServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ecliptix_Proto_Membership_MembershipServicesServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ecliptix_Proto_Membership_MembershipServicesServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateMembershipWithSecureKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeUpdateMembershipWithSecureKeyInterceptors() ?? [],
        wrapping: { try await self.updateMembershipWithSecureKey(request: $0, context: $1) }
      )

    case "SignInMembership":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeSignInMembershipInterceptors() ?? [],
        wrapping: { try await self.signInMembership(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Ecliptix_Proto_Membership_MembershipServicesServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'updateMembershipWithSecureKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateMembershipWithSecureKeyInterceptors() -> [ServerInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]

  /// - Returns: Interceptors to use when handling 'signInMembership'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignInMembershipInterceptors() -> [ServerInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]
}

internal enum Ecliptix_Proto_Membership_MembershipServicesServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MembershipServices",
    fullName: "ecliptix.proto.membership.MembershipServices",
    methods: [
      Ecliptix_Proto_Membership_MembershipServicesServerMetadata.Methods.updateMembershipWithSecureKey,
      Ecliptix_Proto_Membership_MembershipServicesServerMetadata.Methods.signInMembership,
    ]
  )

  internal enum Methods {
    internal static let updateMembershipWithSecureKey = GRPCMethodDescriptor(
      name: "UpdateMembershipWithSecureKey",
      path: "/ecliptix.proto.membership.MembershipServices/UpdateMembershipWithSecureKey",
      type: GRPCCallType.unary
    )

    internal static let signInMembership = GRPCMethodDescriptor(
      name: "SignInMembership",
      path: "/ecliptix.proto.membership.MembershipServices/SignInMembership",
      type: GRPCCallType.unary
    )
  }
}
