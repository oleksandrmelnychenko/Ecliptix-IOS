// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CipherPayload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Ecliptix_Proto_CipherPayload: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var requestID: UInt32 = 0

  public var nonce: Data = Data()

  public var ratchetIndex: UInt32 = 0

  public var cipher: Data = Data()

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var dhPublicKey: Data {
    get {return _dhPublicKey ?? Data()}
    set {_dhPublicKey = newValue}
  }
  /// Returns true if `dhPublicKey` has been explicitly set.
  public var hasDhPublicKey: Bool {return self._dhPublicKey != nil}
  /// Clears the value of `dhPublicKey`. Subsequent reads from it will return its default value.
  public mutating func clearDhPublicKey() {self._dhPublicKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _dhPublicKey: Data? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ecliptix.proto"

extension Ecliptix_Proto_CipherPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CipherPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "nonce"),
    3: .standard(proto: "ratchet_index"),
    4: .same(proto: "cipher"),
    5: .standard(proto: "created_at"),
    6: .standard(proto: "dh_public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.ratchetIndex) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.cipher) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self._dhPublicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.requestID != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestID, fieldNumber: 1)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 2)
    }
    if self.ratchetIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.ratchetIndex, fieldNumber: 3)
    }
    if !self.cipher.isEmpty {
      try visitor.visitSingularBytesField(value: self.cipher, fieldNumber: 4)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._dhPublicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_CipherPayload, rhs: Ecliptix_Proto_CipherPayload) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.ratchetIndex != rhs.ratchetIndex {return false}
    if lhs.cipher != rhs.cipher {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._dhPublicKey != rhs._dhPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
