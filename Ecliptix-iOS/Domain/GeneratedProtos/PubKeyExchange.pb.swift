// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PubKeyExchange.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Ecliptix_Proto_PubKeyExchangeState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case init_ // = 0
  case complete // = 1
  case pending // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .init_
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .init_
    case 1: self = .complete
    case 2: self = .pending
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .init_: return 0
    case .complete: return 1
    case .pending: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Ecliptix_Proto_PubKeyExchangeState] = [
    .init_,
    .complete,
    .pending,
    .failed,
  ]

}

public enum Ecliptix_Proto_PubKeyExchangeType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case dataCenterEphemeralConnect // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .dataCenterEphemeralConnect
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dataCenterEphemeralConnect
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .dataCenterEphemeralConnect: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Ecliptix_Proto_PubKeyExchangeType] = [
    .dataCenterEphemeralConnect,
  ]

}

public struct Ecliptix_Proto_PubKeyExchange: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var state: Ecliptix_Proto_PubKeyExchangeState = .init_

  public var ofType: Ecliptix_Proto_PubKeyExchangeType = .dataCenterEphemeralConnect

  public var payload: Data = Data()

  public var initialDhPublicKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_PublicKeyBundle: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identityPublicKey: Data = Data()

  public var signedPreKeyID: UInt32 = 0

  public var signedPreKeyPublicKey: Data = Data()

  public var signedPreKeySignature: Data = Data()

  public var oneTimePreKeys: [Ecliptix_Proto_PublicKeyBundle.OneTimePreKey] = []

  public var identityX25519PublicKey: Data = Data()

  public var ephemeralX25519PublicKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct OneTimePreKey: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var preKeyID: UInt32 = 0

    public var publicKey: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ecliptix.proto"

extension Ecliptix_Proto_PubKeyExchangeState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INIT"),
    1: .same(proto: "COMPLETE"),
    2: .same(proto: "PENDING"),
    3: .same(proto: "FAILED"),
  ]
}

extension Ecliptix_Proto_PubKeyExchangeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DataCenterEphemeralConnect"),
  ]
}

extension Ecliptix_Proto_PubKeyExchange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PubKeyExchange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "of_type"),
    3: .same(proto: "payload"),
    4: .standard(proto: "initial_Dh_public_Key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.ofType) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.initialDhPublicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .init_ {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if self.ofType != .dataCenterEphemeralConnect {
      try visitor.visitSingularEnumField(value: self.ofType, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    if !self.initialDhPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.initialDhPublicKey, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_PubKeyExchange, rhs: Ecliptix_Proto_PubKeyExchange) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.ofType != rhs.ofType {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.initialDhPublicKey != rhs.initialDhPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_PublicKeyBundle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PublicKeyBundle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_public_key"),
    2: .standard(proto: "signed_pre_key_id"),
    3: .standard(proto: "signed_pre_key_public_key"),
    4: .standard(proto: "signed_pre_key_signature"),
    5: .standard(proto: "one_time_pre_keys"),
    6: .standard(proto: "identity_x25519_public_key"),
    7: .standard(proto: "ephemeral_x25519_public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.identityPublicKey) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.signedPreKeyID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeyPublicKey) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeySignature) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.oneTimePreKeys) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.identityX25519PublicKey) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.ephemeralX25519PublicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityPublicKey, fieldNumber: 1)
    }
    if self.signedPreKeyID != 0 {
      try visitor.visitSingularUInt32Field(value: self.signedPreKeyID, fieldNumber: 2)
    }
    if !self.signedPreKeyPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeyPublicKey, fieldNumber: 3)
    }
    if !self.signedPreKeySignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeySignature, fieldNumber: 4)
    }
    if !self.oneTimePreKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oneTimePreKeys, fieldNumber: 5)
    }
    if !self.identityX25519PublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityX25519PublicKey, fieldNumber: 6)
    }
    if !self.ephemeralX25519PublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.ephemeralX25519PublicKey, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_PublicKeyBundle, rhs: Ecliptix_Proto_PublicKeyBundle) -> Bool {
    if lhs.identityPublicKey != rhs.identityPublicKey {return false}
    if lhs.signedPreKeyID != rhs.signedPreKeyID {return false}
    if lhs.signedPreKeyPublicKey != rhs.signedPreKeyPublicKey {return false}
    if lhs.signedPreKeySignature != rhs.signedPreKeySignature {return false}
    if lhs.oneTimePreKeys != rhs.oneTimePreKeys {return false}
    if lhs.identityX25519PublicKey != rhs.identityX25519PublicKey {return false}
    if lhs.ephemeralX25519PublicKey != rhs.ephemeralX25519PublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_PublicKeyBundle.OneTimePreKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Ecliptix_Proto_PublicKeyBundle.protoMessageName + ".OneTimePreKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pre_key_id"),
    2: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.preKeyID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.preKeyID != 0 {
      try visitor.visitSingularUInt32Field(value: self.preKeyID, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_PublicKeyBundle.OneTimePreKey, rhs: Ecliptix_Proto_PublicKeyBundle.OneTimePreKey) -> Bool {
    if lhs.preKeyID != rhs.preKeyID {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
