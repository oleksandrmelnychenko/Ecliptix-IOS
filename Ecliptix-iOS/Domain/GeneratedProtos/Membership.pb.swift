// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Membership.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Ecliptix_Proto_Membership_Membership: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uniqueIdentifier: Data = Data()

  public var status: Ecliptix_Proto_Membership_Membership.ActivityStatus = .active

  public var creationStatus: Ecliptix_Proto_Membership_Membership.CreationStatus {
    get {return _creationStatus ?? .otpVerified}
    set {_creationStatus = newValue}
  }
  /// Returns true if `creationStatus` has been explicitly set.
  public var hasCreationStatus: Bool {return self._creationStatus != nil}
  /// Clears the value of `creationStatus`. Subsequent reads from it will return its default value.
  public mutating func clearCreationStatus() {self._creationStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum ActivityStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case active // = 0
    case inactive // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .active
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .active
      case 1: self = .inactive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .active: return 0
      case .inactive: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Ecliptix_Proto_Membership_Membership.ActivityStatus] = [
      .active,
      .inactive,
    ]

  }

  public enum CreationStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case otpVerified // = 0
    case secureKeySet // = 1
    case passphraseSet // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .otpVerified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .otpVerified
      case 1: self = .secureKeySet
      case 2: self = .passphraseSet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .otpVerified: return 0
      case .secureKeySet: return 1
      case .passphraseSet: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Ecliptix_Proto_Membership_Membership.CreationStatus] = [
      .otpVerified,
      .secureKeySet,
      .passphraseSet,
    ]

  }

  public init() {}

  fileprivate var _creationStatus: Ecliptix_Proto_Membership_Membership.CreationStatus? = nil
}

public struct Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var secureKey: Data = Data()

  public var membershipIdentifier: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyResponse.UpdateResult = .succeeded

  public var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {self._message = nil}

  public var membership: Ecliptix_Proto_Membership_Membership {
    get {return _membership ?? Ecliptix_Proto_Membership_Membership()}
    set {_membership = newValue}
  }
  /// Returns true if `membership` has been explicitly set.
  public var hasMembership: Bool {return self._membership != nil}
  /// Clears the value of `membership`. Subsequent reads from it will return its default value.
  public mutating func clearMembership() {self._membership = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum UpdateResult: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case succeeded // = 0
    case invalidCredentials // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .succeeded
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .succeeded
      case 1: self = .invalidCredentials
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .succeeded: return 0
      case .invalidCredentials: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyResponse.UpdateResult] = [
      .succeeded,
      .invalidCredentials,
    ]

  }

  public init() {}

  fileprivate var _message: String? = nil
  fileprivate var _membership: Ecliptix_Proto_Membership_Membership? = nil
}

public struct Ecliptix_Proto_Membership_SignInMembershipRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var phoneNumber: String = String()

  public var secureKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_Membership_SignInMembershipResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Ecliptix_Proto_Membership_SignInMembershipResponse.SignInResult = .succeeded

  public var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {self._message = nil}

  public var membership: Ecliptix_Proto_Membership_Membership {
    get {return _membership ?? Ecliptix_Proto_Membership_Membership()}
    set {_membership = newValue}
  }
  /// Returns true if `membership` has been explicitly set.
  public var hasMembership: Bool {return self._membership != nil}
  /// Clears the value of `membership`. Subsequent reads from it will return its default value.
  public mutating func clearMembership() {self._membership = nil}

  public var minutesUntilRetry: String {
    get {return _minutesUntilRetry ?? String()}
    set {_minutesUntilRetry = newValue}
  }
  /// Returns true if `minutesUntilRetry` has been explicitly set.
  public var hasMinutesUntilRetry: Bool {return self._minutesUntilRetry != nil}
  /// Clears the value of `minutesUntilRetry`. Subsequent reads from it will return its default value.
  public mutating func clearMinutesUntilRetry() {self._minutesUntilRetry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum SignInResult: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case succeeded // = 0
    case invalidCredentials // = 1
    case loginAttemptExceeded // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .succeeded
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .succeeded
      case 1: self = .invalidCredentials
      case 2: self = .loginAttemptExceeded
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .succeeded: return 0
      case .invalidCredentials: return 1
      case .loginAttemptExceeded: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Ecliptix_Proto_Membership_SignInMembershipResponse.SignInResult] = [
      .succeeded,
      .invalidCredentials,
      .loginAttemptExceeded,
    ]

  }

  public init() {}

  fileprivate var _message: String? = nil
  fileprivate var _membership: Ecliptix_Proto_Membership_Membership? = nil
  fileprivate var _minutesUntilRetry: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ecliptix.proto.membership"

extension Ecliptix_Proto_Membership_Membership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Membership"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_identifier"),
    3: .same(proto: "status"),
    4: .standard(proto: "creation_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.uniqueIdentifier) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._creationStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uniqueIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.uniqueIdentifier, fieldNumber: 1)
    }
    if self.status != .active {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try { if let v = self._creationStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_Membership, rhs: Ecliptix_Proto_Membership_Membership) -> Bool {
    if lhs.uniqueIdentifier != rhs.uniqueIdentifier {return false}
    if lhs.status != rhs.status {return false}
    if lhs._creationStatus != rhs._creationStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_Membership.ActivityStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACTIVE"),
    1: .same(proto: "INACTIVE"),
  ]
}

extension Ecliptix_Proto_Membership_Membership.CreationStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OTP_VERIFIED"),
    1: .same(proto: "SECURE_KEY_SET"),
    2: .same(proto: "PASSPHRASE_SET"),
  ]
}

extension Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateMembershipWithSecureKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "secure_key"),
    2: .standard(proto: "membership_identifier"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.secureKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.membershipIdentifier) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.secureKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.secureKey, fieldNumber: 1)
    }
    if !self.membershipIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.membershipIdentifier, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyRequest, rhs: Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyRequest) -> Bool {
    if lhs.secureKey != rhs.secureKey {return false}
    if lhs.membershipIdentifier != rhs.membershipIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateMembershipWithSecureKeyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "message"),
    3: .same(proto: "membership"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._membership) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.result != .succeeded {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._membership {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyResponse, rhs: Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._message != rhs._message {return false}
    if lhs._membership != rhs._membership {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_UpdateMembershipWithSecureKeyResponse.UpdateResult: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCEEDED"),
    1: .same(proto: "INVALID_CREDENTIALS"),
  ]
}

extension Ecliptix_Proto_Membership_SignInMembershipRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignInMembershipRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "phone_number"),
    3: .standard(proto: "secure_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.secureKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 2)
    }
    if !self.secureKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.secureKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_SignInMembershipRequest, rhs: Ecliptix_Proto_Membership_SignInMembershipRequest) -> Bool {
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.secureKey != rhs.secureKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_SignInMembershipResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignInMembershipResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "message"),
    3: .same(proto: "membership"),
    4: .standard(proto: "minutes_until_retry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._membership) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._minutesUntilRetry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.result != .succeeded {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._membership {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._minutesUntilRetry {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_SignInMembershipResponse, rhs: Ecliptix_Proto_Membership_SignInMembershipResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._message != rhs._message {return false}
    if lhs._membership != rhs._membership {return false}
    if lhs._minutesUntilRetry != rhs._minutesUntilRetry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_SignInMembershipResponse.SignInResult: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCEEDED"),
    1: .same(proto: "INVALID_CREDENTIALS"),
    2: .same(proto: "LOGIN_ATTEMPT_EXCEEDED"),
  ]
}
