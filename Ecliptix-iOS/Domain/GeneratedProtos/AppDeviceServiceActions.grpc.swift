//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: AppDeviceServiceActions.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClient`, then call methods of this protocol to make API calls.
internal protocol Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol? { get }

  func establishAppDeviceEphemeralConnect(
    _ request: Ecliptix_Proto_PubKeyExchange,
    callOptions: CallOptions?
  ) -> UnaryCall<Ecliptix_Proto_PubKeyExchange, Ecliptix_Proto_PubKeyExchange>

  func registerDeviceAppIfNotExist(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>
}

extension Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientProtocol {
  internal var serviceName: String {
    return "ecliptix.proto.app_device.AppDeviceServiceActions"
  }

  /// Unary call to EstablishAppDeviceEphemeralConnect
  ///
  /// - Parameters:
  ///   - request: Request to send to EstablishAppDeviceEphemeralConnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func establishAppDeviceEphemeralConnect(
    _ request: Ecliptix_Proto_PubKeyExchange,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ecliptix_Proto_PubKeyExchange, Ecliptix_Proto_PubKeyExchange> {
    return self.makeUnaryCall(
      path: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.establishAppDeviceEphemeralConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstablishAppDeviceEphemeralConnectInterceptors() ?? []
    )
  }

  /// Unary call to RegisterDeviceAppIfNotExist
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterDeviceAppIfNotExist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerDeviceAppIfNotExist(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeUnaryCall(
      path: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.registerDeviceAppIfNotExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceAppIfNotExistInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ecliptix_Proto_AppDevice_AppDeviceServiceActionsNIOClient")
internal final class Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClient: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ecliptix.proto.app_device.AppDeviceServiceActions service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ecliptix_Proto_AppDevice_AppDeviceServiceActionsNIOClient: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol?

  /// Creates a client for the ecliptix.proto.app_device.AppDeviceServiceActions service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ecliptix_Proto_AppDevice_AppDeviceServiceActionsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol? { get }

  func makeEstablishAppDeviceEphemeralConnectCall(
    _ request: Ecliptix_Proto_PubKeyExchange,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_PubKeyExchange, Ecliptix_Proto_PubKeyExchange>

  func makeRegisterDeviceAppIfNotExistCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_AppDevice_AppDeviceServiceActionsAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeEstablishAppDeviceEphemeralConnectCall(
    _ request: Ecliptix_Proto_PubKeyExchange,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_PubKeyExchange, Ecliptix_Proto_PubKeyExchange> {
    return self.makeAsyncUnaryCall(
      path: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.establishAppDeviceEphemeralConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstablishAppDeviceEphemeralConnectInterceptors() ?? []
    )
  }

  internal func makeRegisterDeviceAppIfNotExistCall(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload> {
    return self.makeAsyncUnaryCall(
      path: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.registerDeviceAppIfNotExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceAppIfNotExistInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_AppDevice_AppDeviceServiceActionsAsyncClientProtocol {
  internal func establishAppDeviceEphemeralConnect(
    _ request: Ecliptix_Proto_PubKeyExchange,
    callOptions: CallOptions? = nil
  ) async throws -> Ecliptix_Proto_PubKeyExchange {
    return try await self.performAsyncUnaryCall(
      path: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.establishAppDeviceEphemeralConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstablishAppDeviceEphemeralConnectInterceptors() ?? []
    )
  }

  internal func registerDeviceAppIfNotExist(
    _ request: Ecliptix_Proto_CipherPayload,
    callOptions: CallOptions? = nil
  ) async throws -> Ecliptix_Proto_CipherPayload {
    return try await self.performAsyncUnaryCall(
      path: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.registerDeviceAppIfNotExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceAppIfNotExistInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ecliptix_Proto_AppDevice_AppDeviceServiceActionsAsyncClient: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'establishAppDeviceEphemeralConnect'.
  func makeEstablishAppDeviceEphemeralConnectInterceptors() -> [ClientInterceptor<Ecliptix_Proto_PubKeyExchange, Ecliptix_Proto_PubKeyExchange>]

  /// - Returns: Interceptors to use when invoking 'registerDeviceAppIfNotExist'.
  func makeRegisterDeviceAppIfNotExistInterceptors() -> [ClientInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]
}

internal enum Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AppDeviceServiceActions",
    fullName: "ecliptix.proto.app_device.AppDeviceServiceActions",
    methods: [
      Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.establishAppDeviceEphemeralConnect,
      Ecliptix_Proto_AppDevice_AppDeviceServiceActionsClientMetadata.Methods.registerDeviceAppIfNotExist,
    ]
  )

  internal enum Methods {
    internal static let establishAppDeviceEphemeralConnect = GRPCMethodDescriptor(
      name: "EstablishAppDeviceEphemeralConnect",
      path: "/ecliptix.proto.app_device.AppDeviceServiceActions/EstablishAppDeviceEphemeralConnect",
      type: GRPCCallType.unary
    )

    internal static let registerDeviceAppIfNotExist = GRPCMethodDescriptor(
      name: "RegisterDeviceAppIfNotExist",
      path: "/ecliptix.proto.app_device.AppDeviceServiceActions/RegisterDeviceAppIfNotExist",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Ecliptix_Proto_AppDevice_AppDeviceServiceActionsProvider: CallHandlerProvider {
  var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerInterceptorFactoryProtocol? { get }

  func establishAppDeviceEphemeralConnect(request: Ecliptix_Proto_PubKeyExchange, context: StatusOnlyCallContext) -> EventLoopFuture<Ecliptix_Proto_PubKeyExchange>

  func registerDeviceAppIfNotExist(request: Ecliptix_Proto_CipherPayload, context: StatusOnlyCallContext) -> EventLoopFuture<Ecliptix_Proto_CipherPayload>
}

extension Ecliptix_Proto_AppDevice_AppDeviceServiceActionsProvider {
  internal var serviceName: Substring {
    return Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "EstablishAppDeviceEphemeralConnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_PubKeyExchange>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_PubKeyExchange>(),
        interceptors: self.interceptors?.makeEstablishAppDeviceEphemeralConnectInterceptors() ?? [],
        userFunction: self.establishAppDeviceEphemeralConnect(request:context:)
      )

    case "RegisterDeviceAppIfNotExist":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeRegisterDeviceAppIfNotExistInterceptors() ?? [],
        userFunction: self.registerDeviceAppIfNotExist(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ecliptix_Proto_AppDevice_AppDeviceServiceActionsAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerInterceptorFactoryProtocol? { get }

  func establishAppDeviceEphemeralConnect(
    request: Ecliptix_Proto_PubKeyExchange,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ecliptix_Proto_PubKeyExchange

  func registerDeviceAppIfNotExist(
    request: Ecliptix_Proto_CipherPayload,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ecliptix_Proto_CipherPayload
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ecliptix_Proto_AppDevice_AppDeviceServiceActionsAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "EstablishAppDeviceEphemeralConnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_PubKeyExchange>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_PubKeyExchange>(),
        interceptors: self.interceptors?.makeEstablishAppDeviceEphemeralConnectInterceptors() ?? [],
        wrapping: { try await self.establishAppDeviceEphemeralConnect(request: $0, context: $1) }
      )

    case "RegisterDeviceAppIfNotExist":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ecliptix_Proto_CipherPayload>(),
        responseSerializer: ProtobufSerializer<Ecliptix_Proto_CipherPayload>(),
        interceptors: self.interceptors?.makeRegisterDeviceAppIfNotExistInterceptors() ?? [],
        wrapping: { try await self.registerDeviceAppIfNotExist(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'establishAppDeviceEphemeralConnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstablishAppDeviceEphemeralConnectInterceptors() -> [ServerInterceptor<Ecliptix_Proto_PubKeyExchange, Ecliptix_Proto_PubKeyExchange>]

  /// - Returns: Interceptors to use when handling 'registerDeviceAppIfNotExist'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterDeviceAppIfNotExistInterceptors() -> [ServerInterceptor<Ecliptix_Proto_CipherPayload, Ecliptix_Proto_CipherPayload>]
}

internal enum Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AppDeviceServiceActions",
    fullName: "ecliptix.proto.app_device.AppDeviceServiceActions",
    methods: [
      Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerMetadata.Methods.establishAppDeviceEphemeralConnect,
      Ecliptix_Proto_AppDevice_AppDeviceServiceActionsServerMetadata.Methods.registerDeviceAppIfNotExist,
    ]
  )

  internal enum Methods {
    internal static let establishAppDeviceEphemeralConnect = GRPCMethodDescriptor(
      name: "EstablishAppDeviceEphemeralConnect",
      path: "/ecliptix.proto.app_device.AppDeviceServiceActions/EstablishAppDeviceEphemeralConnect",
      type: GRPCCallType.unary
    )

    internal static let registerDeviceAppIfNotExist = GRPCMethodDescriptor(
      name: "RegisterDeviceAppIfNotExist",
      path: "/ecliptix.proto.app_device.AppDeviceServiceActions/RegisterDeviceAppIfNotExist",
      type: GRPCCallType.unary
    )
  }
}
