// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: AuthVerification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Ecliptix_Proto_Membership_VerificationPurpose: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case registration // = 0
  case login // = 1
  case passwordRecovery // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .registration
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .registration
    case 1: self = .login
    case 2: self = .passwordRecovery
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .registration: return 0
    case .login: return 1
    case .passwordRecovery: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Ecliptix_Proto_Membership_VerificationPurpose] = [
    .registration,
    .login,
    .passwordRecovery,
  ]

}

public enum Ecliptix_Proto_Membership_VerificationResult: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case succeeded // = 0
  case invalidPhone // = 1
  case invalidOtp // = 2
  case expired // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .succeeded
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .succeeded
    case 1: self = .invalidPhone
    case 2: self = .invalidOtp
    case 3: self = .expired
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .succeeded: return 0
    case .invalidPhone: return 1
    case .invalidOtp: return 2
    case .expired: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Ecliptix_Proto_Membership_VerificationResult] = [
    .succeeded,
    .invalidPhone,
    .invalidOtp,
    .expired,
  ]

}

public struct Ecliptix_Proto_Membership_InitiateVerificationRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var phoneNumberIdentifier: Data = Data()

  public var appDeviceIdentifier: Data = Data()

  public var purpose: Ecliptix_Proto_Membership_VerificationPurpose = .registration

  public var type: Ecliptix_Proto_Membership_InitiateVerificationRequest.TypeEnum = .sendOtp

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case sendOtp // = 0
    case resendOtp // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .sendOtp
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sendOtp
      case 1: self = .resendOtp
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .sendOtp: return 0
      case .resendOtp: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Ecliptix_Proto_Membership_InitiateVerificationRequest.TypeEnum] = [
      .sendOtp,
      .resendOtp,
    ]

  }

  public init() {}
}

public struct Ecliptix_Proto_Membership_InitiateVerificationResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Ecliptix_Proto_Membership_VerificationResult = .succeeded

  public var message: String = String()

  public var sessionIdentifier: Data = Data()

  public var purpose: Ecliptix_Proto_Membership_VerificationPurpose = .registration

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_Membership_VerificationCountdownUpdate: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var secondsRemaining: UInt64 = 0

  public var sessionIdentifier: Data = Data()

  public var alreadyVerified: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_Membership_VerifyCodeRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var appDeviceIdentifier: Data = Data()

  public var code: String = String()

  public var purpose: Ecliptix_Proto_Membership_VerificationPurpose = .registration

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_Membership_VerifyCodeResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Ecliptix_Proto_Membership_VerificationResult = .succeeded

  public var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {self._message = nil}

  public var membership: Ecliptix_Proto_Membership_Membership {
    get {return _membership ?? Ecliptix_Proto_Membership_Membership()}
    set {_membership = newValue}
  }
  /// Returns true if `membership` has been explicitly set.
  public var hasMembership: Bool {return self._membership != nil}
  /// Clears the value of `membership`. Subsequent reads from it will return its default value.
  public mutating func clearMembership() {self._membership = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _message: String? = nil
  fileprivate var _membership: Ecliptix_Proto_Membership_Membership? = nil
}

public struct Ecliptix_Proto_Membership_ValidatePhoneNumberRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var phoneNumber: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ecliptix_Proto_Membership_ValidatePhoneNumberResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var phoneNumberIdentifier: Data = Data()

  public var result: Ecliptix_Proto_Membership_VerificationResult = .succeeded

  public var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {self._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _message: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ecliptix.proto.membership"

extension Ecliptix_Proto_Membership_VerificationPurpose: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REGISTRATION"),
    1: .same(proto: "LOGIN"),
    2: .same(proto: "PASSWORD_RECOVERY"),
  ]
}

extension Ecliptix_Proto_Membership_VerificationResult: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCEEDED"),
    1: .same(proto: "INVALID_PHONE"),
    2: .same(proto: "INVALID_OTP"),
    3: .same(proto: "EXPIRED"),
  ]
}

extension Ecliptix_Proto_Membership_InitiateVerificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InitiateVerificationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "phone_number_identifier"),
    2: .standard(proto: "app_device_identifier"),
    3: .same(proto: "purpose"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.phoneNumberIdentifier) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.appDeviceIdentifier) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.purpose) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumberIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.phoneNumberIdentifier, fieldNumber: 1)
    }
    if !self.appDeviceIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.appDeviceIdentifier, fieldNumber: 2)
    }
    if self.purpose != .registration {
      try visitor.visitSingularEnumField(value: self.purpose, fieldNumber: 3)
    }
    if self.type != .sendOtp {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_InitiateVerificationRequest, rhs: Ecliptix_Proto_Membership_InitiateVerificationRequest) -> Bool {
    if lhs.phoneNumberIdentifier != rhs.phoneNumberIdentifier {return false}
    if lhs.appDeviceIdentifier != rhs.appDeviceIdentifier {return false}
    if lhs.purpose != rhs.purpose {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_InitiateVerificationRequest.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEND_OTP"),
    1: .same(proto: "RESEND_OTP"),
  ]
}

extension Ecliptix_Proto_Membership_InitiateVerificationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InitiateVerificationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "message"),
    3: .standard(proto: "session_identifier"),
    4: .same(proto: "purpose"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.sessionIdentifier) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.purpose) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .succeeded {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if !self.sessionIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.sessionIdentifier, fieldNumber: 3)
    }
    if self.purpose != .registration {
      try visitor.visitSingularEnumField(value: self.purpose, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_InitiateVerificationResponse, rhs: Ecliptix_Proto_Membership_InitiateVerificationResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.message != rhs.message {return false}
    if lhs.sessionIdentifier != rhs.sessionIdentifier {return false}
    if lhs.purpose != rhs.purpose {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_VerificationCountdownUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VerificationCountdownUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seconds_remaining"),
    2: .standard(proto: "session_identifier"),
    3: .standard(proto: "already_verified"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.secondsRemaining) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.sessionIdentifier) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.alreadyVerified) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.secondsRemaining != 0 {
      try visitor.visitSingularUInt64Field(value: self.secondsRemaining, fieldNumber: 1)
    }
    if !self.sessionIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.sessionIdentifier, fieldNumber: 2)
    }
    if self.alreadyVerified != false {
      try visitor.visitSingularBoolField(value: self.alreadyVerified, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_VerificationCountdownUpdate, rhs: Ecliptix_Proto_Membership_VerificationCountdownUpdate) -> Bool {
    if lhs.secondsRemaining != rhs.secondsRemaining {return false}
    if lhs.sessionIdentifier != rhs.sessionIdentifier {return false}
    if lhs.alreadyVerified != rhs.alreadyVerified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_VerifyCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VerifyCodeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_device_identifier"),
    2: .same(proto: "code"),
    3: .same(proto: "purpose"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.appDeviceIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.code) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.purpose) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appDeviceIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.appDeviceIdentifier, fieldNumber: 1)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 2)
    }
    if self.purpose != .registration {
      try visitor.visitSingularEnumField(value: self.purpose, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_VerifyCodeRequest, rhs: Ecliptix_Proto_Membership_VerifyCodeRequest) -> Bool {
    if lhs.appDeviceIdentifier != rhs.appDeviceIdentifier {return false}
    if lhs.code != rhs.code {return false}
    if lhs.purpose != rhs.purpose {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_VerifyCodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VerifyCodeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "message"),
    3: .same(proto: "membership"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._membership) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.result != .succeeded {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._membership {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_VerifyCodeResponse, rhs: Ecliptix_Proto_Membership_VerifyCodeResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._message != rhs._message {return false}
    if lhs._membership != rhs._membership {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_ValidatePhoneNumberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidatePhoneNumberRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "phone_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_ValidatePhoneNumberRequest, rhs: Ecliptix_Proto_Membership_ValidatePhoneNumberRequest) -> Bool {
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_Membership_ValidatePhoneNumberResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidatePhoneNumberResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "phone_number_identifier"),
    2: .same(proto: "result"),
    3: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.phoneNumberIdentifier) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.phoneNumberIdentifier.isEmpty {
      try visitor.visitSingularBytesField(value: self.phoneNumberIdentifier, fieldNumber: 1)
    }
    if self.result != .succeeded {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 2)
    }
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_Membership_ValidatePhoneNumberResponse, rhs: Ecliptix_Proto_Membership_ValidatePhoneNumberResponse) -> Bool {
    if lhs.phoneNumberIdentifier != rhs.phoneNumberIdentifier {return false}
    if lhs.result != rhs.result {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
