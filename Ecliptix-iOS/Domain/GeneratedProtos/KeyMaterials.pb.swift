// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: KeyMaterials.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Ecliptix_Proto_KeyMaterials_DeviceKeyMaterial: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the key format
  public var version: UInt32 = 0

  /// Creation timestamp
  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  /// 32 bytes (encrypt in practice)
  public var ed25519Secret: Data = Data()

  /// 32 bytes
  public var ed25519Public: Data = Data()

  /// 32 bytes (encrypt in practice)
  public var identityX25519Secret: Data = Data()

  /// 32 bytes
  public var identityX25519Public: Data = Data()

  /// Random u32 ID
  public var signedPreKeyID: UInt32 = 0

  /// 32 bytes (encrypt in practice)
  public var signedPreKeySecret: Data = Data()

  /// 32 bytes
  public var signedPreKeyPublic: Data = Data()

  /// 64 bytes
  public var signedPreKeySignature: Data = Data()

  public var oneTimePreKeys: [Ecliptix_Proto_KeyMaterials_OneTimePreKeyLocal] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Ecliptix_Proto_KeyMaterials_OneTimePreKeyLocal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique ID
  public var preKeyID: UInt32 = 0

  /// 32 bytes (encrypt in practice)
  public var secret: Data = Data()

  /// 32 bytes
  public var `public`: Data = Data()

  /// Indicates if the key has been used
  public var used: Bool = false

  /// Creation timestamp
  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ecliptix.proto.key_materials"

extension Ecliptix_Proto_KeyMaterials_DeviceKeyMaterial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceKeyMaterial"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "version"),
    11: .standard(proto: "created_at"),
    1: .standard(proto: "ed25519_secret"),
    2: .standard(proto: "ed25519_public"),
    3: .standard(proto: "identity_x25519_secret"),
    4: .standard(proto: "identity_x25519_public"),
    5: .standard(proto: "signed_pre_key_id"),
    6: .standard(proto: "signed_pre_key_secret"),
    7: .standard(proto: "signed_pre_key_public"),
    8: .standard(proto: "signed_pre_key_signature"),
    9: .standard(proto: "one_time_pre_keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.ed25519Secret) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.ed25519Public) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.identityX25519Secret) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.identityX25519Public) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.signedPreKeyID) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeySecret) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeyPublic) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.signedPreKeySignature) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.oneTimePreKeys) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.ed25519Secret.isEmpty {
      try visitor.visitSingularBytesField(value: self.ed25519Secret, fieldNumber: 1)
    }
    if !self.ed25519Public.isEmpty {
      try visitor.visitSingularBytesField(value: self.ed25519Public, fieldNumber: 2)
    }
    if !self.identityX25519Secret.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityX25519Secret, fieldNumber: 3)
    }
    if !self.identityX25519Public.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityX25519Public, fieldNumber: 4)
    }
    if self.signedPreKeyID != 0 {
      try visitor.visitSingularUInt32Field(value: self.signedPreKeyID, fieldNumber: 5)
    }
    if !self.signedPreKeySecret.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeySecret, fieldNumber: 6)
    }
    if !self.signedPreKeyPublic.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeyPublic, fieldNumber: 7)
    }
    if !self.signedPreKeySignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPreKeySignature, fieldNumber: 8)
    }
    if !self.oneTimePreKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oneTimePreKeys, fieldNumber: 9)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 10)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_KeyMaterials_DeviceKeyMaterial, rhs: Ecliptix_Proto_KeyMaterials_DeviceKeyMaterial) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.ed25519Secret != rhs.ed25519Secret {return false}
    if lhs.ed25519Public != rhs.ed25519Public {return false}
    if lhs.identityX25519Secret != rhs.identityX25519Secret {return false}
    if lhs.identityX25519Public != rhs.identityX25519Public {return false}
    if lhs.signedPreKeyID != rhs.signedPreKeyID {return false}
    if lhs.signedPreKeySecret != rhs.signedPreKeySecret {return false}
    if lhs.signedPreKeyPublic != rhs.signedPreKeyPublic {return false}
    if lhs.signedPreKeySignature != rhs.signedPreKeySignature {return false}
    if lhs.oneTimePreKeys != rhs.oneTimePreKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ecliptix_Proto_KeyMaterials_OneTimePreKeyLocal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OneTimePreKeyLocal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pre_key_id"),
    2: .same(proto: "secret"),
    3: .same(proto: "public"),
    4: .same(proto: "used"),
    5: .standard(proto: "created_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.preKeyID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.secret) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.`public`) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.used) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.preKeyID != 0 {
      try visitor.visitSingularUInt32Field(value: self.preKeyID, fieldNumber: 1)
    }
    if !self.secret.isEmpty {
      try visitor.visitSingularBytesField(value: self.secret, fieldNumber: 2)
    }
    if !self.`public`.isEmpty {
      try visitor.visitSingularBytesField(value: self.`public`, fieldNumber: 3)
    }
    if self.used != false {
      try visitor.visitSingularBoolField(value: self.used, fieldNumber: 4)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ecliptix_Proto_KeyMaterials_OneTimePreKeyLocal, rhs: Ecliptix_Proto_KeyMaterials_OneTimePreKeyLocal) -> Bool {
    if lhs.preKeyID != rhs.preKeyID {return false}
    if lhs.secret != rhs.secret {return false}
    if lhs.`public` != rhs.`public` {return false}
    if lhs.used != rhs.used {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
